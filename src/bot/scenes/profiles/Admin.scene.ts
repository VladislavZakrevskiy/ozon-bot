import { Ctx, Action, Update } from 'nestjs-telegraf';
import { SessionSceneContext } from 'src/bot/types/Scene';
import { OrderProcess } from '@prisma/client';
import { getDefaultText } from 'src/core/helpers/getDefaultText';
import { RedisService } from 'src/core/redis/redis.service';
import { getRedisKeys } from 'src/core/redis/redisKeys';
import { ListManager } from 'src/bot/template/ListManager';
import { OrderService } from 'src/order/order.service';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import { UserService } from 'src/user/user.service';
import { getTelegramImage } from 'src/core/helpers/getTelegramImage';

@Update()
export class AdminProfileService {
  constructor(
    private readonly orderService: OrderService,
    private readonly userService: UserService,
    private redis: RedisService,
  ) {}

  async getOrdersListManager(ctx: SessionSceneContext, process_type: OrderProcess = 'DONE') {
    const redisIndex = await this.redis.get(
      getRedisKeys('currentIndex_adminOrders', process_type, ctx.chat.id),
    );
    const orders = await this.orderService.findManyByParameter({ process: [process_type] });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–π
    let currentIndex = redisIndex ? Number(redisIndex) : 0;
    if (isNaN(currentIndex) || currentIndex < 0 || currentIndex >= orders.length) {
      currentIndex = 0;
      await this.redis.set(getRedisKeys('currentIndex_adminOrders', process_type, ctx.chat.id), 0);
    }
    const listManager = new ListManager(
      this.redis,
      orders,
      {
        extraButtons: [
          [
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            {
              text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
              web_app: (order) => ({ url: `${process.env.WEBAPP_URL}/updateOrder/${order.id}` }),
            },
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            {
              text: '–ù–∞–π—Ç–∏ üîé',
              web_app: () => ({ url: `${process.env.WEBAPP_URL}/find` }),
            },
          ],
        ],
        getText: (order) => getDefaultText(order, 'char'),
        getImage: async (order) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
          return order.image_urls && order.image_urls.length > 0
            ? String(order.image_urls[0])
            : 'https://cdn-icons-png.flaticon.com/512/2830/2830524.png';
        },
      },
      ctx,
      process_type,
      'currentIndex_adminOrders',
    );

    return { listManager, currentIndex, orders };
  }
  // OrderList
  @Action(/^next__currentIndex_adminOrders_(DONE|IN_WORK|RETURN)$/)
  public async handleOrderNext(@Ctx() ctx: SessionSceneContext): Promise<void> {
    const prefix = (ctx.callbackQuery as CallbackQuery.DataQuery).data.split(
      '_',
    )?.[4] as OrderProcess;
    const { currentIndex, listManager, orders } = await this.getOrdersListManager(ctx, prefix);

    if (currentIndex < orders.length - 1) {
      await this.redis.set(
        getRedisKeys('currentIndex_adminOrders', listManager.prefix, ctx.chat.id),
        currentIndex + 1,
      );
      await listManager.editMessage();
    } else {
      await ctx.answerCbQuery('–ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
  }

  @Action(/^prev__currentIndex_adminOrders_(DONE|IN_WORK|RETURN)$/)
  public async handleOrderPrev(@Ctx() ctx: SessionSceneContext): Promise<void> {
    const prefix = (ctx.callbackQuery as CallbackQuery.DataQuery).data.split(
      '_',
    )?.[4] as OrderProcess;
    const { currentIndex, listManager } = await this.getOrdersListManager(ctx, prefix);

    if (currentIndex > 0) {
      await this.redis.set(
        getRedisKeys('currentIndex_adminOrders', listManager.prefix, ctx.chat.id),
        currentIndex - 1,
      );
      await listManager.editMessage();
    } else {
      await ctx.answerCbQuery('–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }
  }

  @Action('admin_done_orders')
  async doneOrders(@Ctx() ctx: SessionSceneContext) {
    const { listManager, orders } = await this.getOrdersListManager(ctx, OrderProcess.DONE);

    if (orders.length === 0) {
      await ctx.reply('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç(');
      return;
    }

    listManager.sendInitialMessage();
  }

  @Action('admin_work_orders')
  async workOrders(@Ctx() ctx: SessionSceneContext) {
    const { listManager, orders } = await this.getOrdersListManager(ctx, OrderProcess.IN_WORK);

    if (orders.length === 0) {
      await ctx.reply('–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç(');
      return;
    }

    listManager.sendInitialMessage();
  }

  @Action('admin_return_orders')
  async returnOrders(@Ctx() ctx: SessionSceneContext) {
    const { listManager, orders } = await this.getOrdersListManager(ctx, OrderProcess.RETURN);

    if (orders.length === 0) {
      await ctx.reply('–í–æ–∑–≤—Ä–∞—Ç–æ–≤ –Ω–µ—Ç(');
      return;
    }

    listManager.sendInitialMessage();
  }

  async handleProfile(ctx: SessionSceneContext) {
    const user_id = await this.redis.get(getRedisKeys('user_id', ctx.chat.id));
    const user = await this.userService.findUserById(user_id, true);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getTelegramImage –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const photo_url = await getTelegramImage(ctx, user.tg_user_id);

    ctx.sendPhoto(
      { url: photo_url.toString() },
      {
        caption: getDefaultText(user, 'new'),
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [
            [{ callback_data: 'admin_done_orders', text: '–í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' }],
            [{ callback_data: 'admin_work_orders', text: '–í—Å–µ –≤ —Ä–∞–±–æ—Ç–µ' }],
            [{ callback_data: 'admin_return_orders', text: '–í—Å–µ –≤–æ–∑–≤—Ä–∞—Ç—ã' }],
            [{ callback_data: 'admin_add_return', text: '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç' }],
          ],
        },
      },
    );
  }

  @Action('admin_add_return')
  async addReturn(@Ctx() ctx: SessionSceneContext) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    await this.redis.set(getRedisKeys('adding_return', ctx.chat.id), 'true');

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' +
        '–ê—Ä—Ç–∏–∫—É–ª (SKU)\n' +
        'ID —Ç–æ–≤–∞—Ä–∞\n' +
        '–¶–µ–Ω–∞\n' +
        'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
        '–°–º–∞—Ä—Ç—Ñ–æ–Ω Xiaomi\n' +
        'XM-123456\n' +
        '123456789\n' +
        '15000\n' +
        'https://example.com/image.jpg',
    );

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await ctx.scene.enter('RETURN_INPUT');
  }
}
